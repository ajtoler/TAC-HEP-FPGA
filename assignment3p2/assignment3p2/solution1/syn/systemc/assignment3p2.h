// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _assignment3p2_HH_
#define _assignment3p2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct assignment3p2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<32> > in_r_q0;
    sc_in< sc_lv<8> > a;
    sc_in< sc_lv<8> > b;
    sc_in< sc_lv<8> > c;
    sc_out< sc_lv<2> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;


    // Module declarations
    assignment3p2(sc_module_name name);
    SC_HAS_PROCESS(assignment3p2);

    ~assignment3p2();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sext_ln13_fu_89_p1;
    sc_signal< sc_lv<32> > sext_ln13_reg_139;
    sc_signal< sc_lv<32> > sext_ln13_2_fu_107_p1;
    sc_signal< sc_lv<32> > sext_ln13_2_reg_144;
    sc_signal< sc_lv<2> > i_fu_117_p2;
    sc_signal< sc_lv<2> > i_reg_152;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln12_fu_123_p1;
    sc_signal< sc_lv<64> > zext_ln12_reg_157;
    sc_signal< sc_lv<1> > icmp_ln10_fu_111_p2;
    sc_signal< sc_lv<2> > i_0_reg_78;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > sext_ln13_1_fu_93_p1;
    sc_signal< sc_lv<9> > sext_ln10_fu_97_p1;
    sc_signal< sc_lv<9> > add_ln13_fu_101_p2;
    sc_signal< sc_lv<32> > mul_ln13_fu_128_p0;
    sc_signal< sc_lv<8> > mul_ln13_fu_128_p1;
    sc_signal< sc_lv<32> > mul_ln13_fu_128_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln13_fu_101_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_117_p2();
    void thread_icmp_ln10_fu_111_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_mul_ln13_fu_128_p0();
    void thread_mul_ln13_fu_128_p1();
    void thread_mul_ln13_fu_128_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_sext_ln10_fu_97_p1();
    void thread_sext_ln13_1_fu_93_p1();
    void thread_sext_ln13_2_fu_107_p1();
    void thread_sext_ln13_fu_89_p1();
    void thread_zext_ln12_fu_123_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
