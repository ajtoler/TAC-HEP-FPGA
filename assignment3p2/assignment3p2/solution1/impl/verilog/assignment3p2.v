// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="assignment3p2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.502000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=73,HLS_SYN_LUT=122,HLS_VERSION=2020_1}" *)

module assignment3p2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        a,
        b,
        c,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
input  [7:0] a;
input  [7:0] b;
input  [7:0] c;
output  [1:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] sext_ln13_fu_89_p1;
reg  signed [31:0] sext_ln13_reg_139;
wire  signed [31:0] sext_ln13_2_fu_107_p1;
reg  signed [31:0] sext_ln13_2_reg_144;
wire   [1:0] i_fu_117_p2;
reg   [1:0] i_reg_152;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln12_fu_123_p1;
reg   [63:0] zext_ln12_reg_157;
wire   [0:0] icmp_ln10_fu_111_p2;
reg   [1:0] i_0_reg_78;
wire    ap_CS_fsm_state3;
wire  signed [8:0] sext_ln13_1_fu_93_p1;
wire  signed [8:0] sext_ln10_fu_97_p1;
wire   [8:0] add_ln13_fu_101_p2;
wire  signed [31:0] mul_ln13_fu_128_p0;
wire  signed [7:0] mul_ln13_fu_128_p1;
wire   [31:0] mul_ln13_fu_128_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_78 <= i_reg_152;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_78 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_152 <= i_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_ln13_2_reg_144 <= sext_ln13_2_fu_107_p1;
        sext_ln13_reg_139 <= sext_ln13_fu_89_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln12_reg_157[1 : 0] <= zext_ln12_fu_123_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_101_p2 = ($signed(sext_ln13_1_fu_93_p1) + $signed(sext_ln10_fu_97_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_fu_117_p2 = (i_0_reg_78 + 2'd1);

assign icmp_ln10_fu_111_p2 = ((i_0_reg_78 == 2'd3) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln12_fu_123_p1;

assign mul_ln13_fu_128_p0 = in_r_q0;

assign mul_ln13_fu_128_p1 = sext_ln13_reg_139;

assign mul_ln13_fu_128_p2 = ($signed(mul_ln13_fu_128_p0) * $signed(mul_ln13_fu_128_p1));

assign out_r_address0 = zext_ln12_reg_157;

assign out_r_d0 = ($signed(sext_ln13_2_reg_144) + $signed(mul_ln13_fu_128_p2));

assign sext_ln10_fu_97_p1 = $signed(c);

assign sext_ln13_1_fu_93_p1 = $signed(b);

assign sext_ln13_2_fu_107_p1 = $signed(add_ln13_fu_101_p2);

assign sext_ln13_fu_89_p1 = $signed(a);

assign zext_ln12_fu_123_p1 = i_0_reg_78;

always @ (posedge ap_clk) begin
    zext_ln12_reg_157[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //assignment3p2
